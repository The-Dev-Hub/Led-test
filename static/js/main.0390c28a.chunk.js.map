{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["thisRoom","secuence","curretSecuence","client","Colyseus","App","props","state","lost","loading","color","ccs","slice","length","send","this","setState","console","log","joinOrCreate","then","room","sessionId","name","onMessage","message","id","catch","e","className","style","backgroundColor","type","onClick","checkColor","start","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"mNAMIA,E,yFAFAC,EAAW,GACXC,EAAiB,GAGjBC,EAAS,IAAIC,SAAgB,2CAIZC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAM,EAAOC,SAAS,GAFpB,E,uDAIRC,GACTT,GAAsBS,EACtB,IAAIC,EAAMT,EAAeU,MAAM,EAAGX,EAASY,QACvCZ,IAAaU,EACXV,EAASY,SAAWX,EAAeW,SACrCZ,EAAW,GACXD,EAASc,KAAK,QAGhBC,KAAKC,SAAS,CAAER,MAAM,IACtBS,QAAQC,IAAI,WAAYhB,GACxBF,EAASc,KAAK,U,8BAKhBd,EAASc,KAAK,W,0CAGK,IAAD,OAClBX,EACGgB,aAAa,WACbC,MAAK,SAACC,GACL,EAAKL,SAAS,CAAEP,SAAS,EAAOD,KAAM,EAAKD,MAAMC,OACjDR,EAAWqB,EACXJ,QAAQC,IAAIG,EAAKC,UAAW,SAAUD,EAAKE,MAC3CF,EAAKG,UAAU,YAAY,SAACC,GAC1BvB,EAAiBuB,EACjBR,QAAQC,IAAIf,EAAOuB,GAAI,cAAeL,EAAKE,KAAME,SAGpDE,OAAM,SAACC,GACNX,QAAQC,IAAI,aAAcU,Q,+BAItB,IAAD,OAEP,OADAX,QAAQC,IAAI,SAAUH,KAAKR,MAAME,SAC7BM,KAAKR,MAAMC,KACN,yBAAKqB,UAAU,OAAf,YACEd,KAAKR,MAAME,QACb,yBAAKoB,UAAU,OAAf,WAGL,yBAAKA,UAAU,OACb,4BACEA,UAAU,SACVC,MAAO,CACLC,gBAAiB,OAEnBC,KAAK,SACLC,QAAS,kBAAM,EAAKC,WAAW,QAEjC,6BACA,4BACEL,UAAU,SACVC,MAAO,CACLC,gBAAiB,UAEnBC,KAAK,SACLC,QAAS,kBAAM,EAAKC,WAAW,QAEjC,6BACA,4BACEL,UAAU,SACVC,MAAO,CACLC,gBAAiB,SAEnBC,KAAK,SACLC,QAAS,kBAAM,EAAKC,WAAW,QAEjC,6BACA,4BAAQF,KAAK,SAASC,QAASlB,KAAKoB,OAApC,SAGA,kC,GAhFuBC,IAAMC,WCAnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLpC,QAAQoC,MAAMA,EAAM5B,c","file":"static/js/main.0390c28a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport * as Colyseus from \"colyseus.js\"; // not necessary if included via <script> tag.\r\n\r\nlet secuence = \"\";\r\nlet curretSecuence = \"\";\r\nlet thisRoom;\r\n\r\nvar client = new Colyseus.Client(\"wss://immense-ridge-55308.herokuapp.com\");\r\n// var client = new Colyseus.Client(\"ws://localhost:2567\");\r\n\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { lost: false, loading: true };\r\n  }\r\n  checkColor(color) {\r\n    secuence = secuence + color;\r\n    var ccs = curretSecuence.slice(0, secuence.length);\r\n    if (secuence === ccs) {\r\n      if (secuence.length === curretSecuence.length) {\r\n        secuence = \"\";\r\n        thisRoom.send(\"ok\");\r\n      }\r\n    } else {\r\n      this.setState({ lost: true });\r\n      console.log(\"You lost\", curretSecuence);\r\n      thisRoom.send(\"nok\");\r\n    }\r\n  }\r\n\r\n  start() {\r\n    thisRoom.send(\"start\");\r\n  }\r\n\r\n  componentDidMount() {\r\n    client\r\n      .joinOrCreate(\"my_room\")\r\n      .then((room) => {\r\n        this.setState({ loading: false, lost: this.state.lost });\r\n        thisRoom = room;\r\n        console.log(room.sessionId, \"joined\", room.name);\r\n        room.onMessage(\"secuence\", (message) => {\r\n          curretSecuence = message;\r\n          console.log(client.id, \"received on\", room.name, message);\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(\"JOIN ERROR\", e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Render\", this.state.loading);\r\n    if (this.state.lost) {\r\n      return <div className=\"App\">YOU LOST</div>;\r\n    } else if (this.state.loading) {\r\n      return <div className=\"App\">LOADING</div>;\r\n    } else {\r\n      return (\r\n        <div className=\"App\">\r\n          <button\r\n            className=\"button\"\r\n            style={{\r\n              backgroundColor: \"red\",\r\n            }}\r\n            type=\"button\"\r\n            onClick={() => this.checkColor(\"R\")}\r\n          ></button>\r\n          <br></br>\r\n          <button\r\n            className=\"button\"\r\n            style={{\r\n              backgroundColor: \"yellow\",\r\n            }}\r\n            type=\"button\"\r\n            onClick={() => this.checkColor(\"Y\")}\r\n          ></button>\r\n          <br></br>\r\n          <button\r\n            className=\"button\"\r\n            style={{\r\n              backgroundColor: \"green\",\r\n            }}\r\n            type=\"button\"\r\n            onClick={() => this.checkColor(\"G\")}\r\n          ></button>\r\n          <br></br>\r\n          <button type=\"button\" onClick={this.start}>\r\n            START\r\n          </button>\r\n          <br></br>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}